package edu.towson.cis.cosc603.project4.vendingmachine;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import edu.towson.cis.cosc603.project4.rectangle.Rectangle;

public class VendingMachineItemTest {
	
	/** Declaring necessary test objects for {@link VendingMachindItem} */
	Double price1;
	Double price2;
	Double price3;

	VendingMachineItem butterfinger;
	VendingMachineItem noName;
	VendingMachineItem snickers;
	
		
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	
	}
	
	/**
	 * Initializes the necessary test objects for the test cases to use.
	 *
	 * @throws Exception the exception
	 */
	@Before
	public void setUp() throws Exception {
		
		snickers = new VendingMachineItem("Snicker", 1.00);
		butterfinger = new VendingMachineItem("Butterfinger",1.50);
		noName = new VendingMachineItem(null,2.00);
		
		price1 = 1.00;
		price2 = -1.00;

	}

	/**
	 * Cleans up test objects after a test case is executed.
	 */
	@After
	public void tearDown() throws Exception {
		price1 = 0.0;
		price2 = 0.0;
		price3 = 0.0;

		snickers = new VendingMachineItem(null, 0.00);
		butterfinger = new VendingMachineItem(null,0.00);
		noName = new VendingMachineItem(null,0.00);
	}

	@Test
	/**
	 * Testing the VendingMachineItem Constructor to 
	 * ensure that price value is greater then or equal to 
	 * zero value 
	 */
	
	public void testVendingMachineItem_GreaterThanEqualToZero() {
		//fail("Not yet implemented");
		assertTrue(price1>=0);
	}
	
	@Test
	/**
	 * Testing the VendingMachineItem Constructor to 
	 * ensure that price value is less then zero value
	 */
	public void testVendingMachineItem_LessThanZero() {
		//fail("Not yet implemented");
		assertTrue(price2<0);
	}

	@Test
	public void testGetName_ItemHasName(){
		//fail("Not yet implemented");
		assertNotNull(butterfinger.getName());
	}
	@Test
	public void testGetName_ItemNameMissing(){
		//fail("Not yet implemented");
		assertNull(noName.getName());
	}
	
	@Test
	//Testing the Price is a positive number.
	public void testGetPrice_PositiveNumber() {
		//fail("Not yet implemented");
		assertEquals(1.00,snickers.getPrice(),0.01);
	}
	
	@Test (expected = VendingMachineException.class)
	//The negative number test case will fail because if you 
	//give it something less than zero it will throw and exception
	//and fail. We can test for this.
	public void testGetPrice_NegitiveNumber() {
		//Performing test for a purchase where the price is not legal.  
		VendingMachineItem free = new VendingMachineItem("free", -1.00);
		assertEquals(-1.00,free.getPrice(),0.01);
	}
}
